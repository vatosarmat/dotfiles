{
  "suggest.autoTrigger": "none",
  "suggest.noselect": false,
  "diagnostic.errorSign": "‚ùå",
  "diagnostic.infoSign": "‚Ñπ",
  "diagnostic.hintSign": "üí°",
  "explorer.icon.enableNerdfont": true,
  "explorer.position": "left",
  "explorer.file.hiddenRules": {
    "extensions": ["o", "a", "obj", "pyc"],
    "filenames": [".git", "node_modules", ".netrwhist"],
    "patternMatches": []
  },
  "explorer.file.autoReveal": true,
  "explorer.openAction.relativePath": true,
  "pairs.enableCharacters": ["(", "[", "{"],
  "signature.enable": false,
  "coc.preferences.formatOnType": true,
  "coc.preferences.formatOnSaveFiletypes": ["*"],
  "coc.source.around.firstMatch": true,
  "coc.source.buffer.firstMatch": true,
  "coc.preferences.currentFunctionSymbolAutoUpdate": true,
  "list.previewSplitRight": true,
  "clangd.semanticHighlighting": true,
  /*Shellcheck is better for that*/
  "sh.highlightParsingErrors": false,
  "diagnostic-languageserver.filetypes": {
    "sh": "shellcheck"
  },
  "diagnostic-languageserver.formatFiletypes": {
    // format `sh` (includes `bash`) files using formatter defined below
    "sh": "shfmt"
  },
  "diagnostic-languageserver.formatters": {
    // define our formatter so that we can reference it from
    // `diagnostic-languageserver.formatFiletypes`
    "shfmt": {
      "command": "shfmt",
      // all the below args are entirely optional
      // primarily listed here to call out that flags which take an
      // argument (such as `-i <num-spaces>` for specifying indentation)
      // should be split into two strings, the flag and then the value
      "args": ["-i", "2", "-bn", "-ci", "-sr"]
    }
  },
  /* "tsserver.trace.server": "verbose", */
  /* "tsserver.log": "verbose", */
  "languageserver": {
    /* "dls": { */
    /*   "command": "diagnostic-languageserver", */
    /*   "args": ["--stdio", "--log-level=4"], */
    /*   "filetypes": ["sh"], */
    /*   "initializationOptions": { */
    /*     "linters": { */
    /*       "shellcheck": { */
    /*         "args": ["--format=json", "--shell=sh", "-"] */
    /*       } */
    /*     } */
    /*   } */
    /* }, */
    /* "haskell": { */
    /*   "enable": false, */
    /*   "command": "haskell-language-server-wrapper", */
    /*   "args": ["--lsp"], */
    /*   "rootPatterns": [ */
    /*     "*.cabal", */
    /*     "stack.yaml", */
    /*     "cabal.project", */
    /*     "package.yaml", */
    /*     "hie.yaml" */
    /*   ], */
    /*   "filetypes": ["haskell", "lhaskell"], */
    /*   "initializationOptions": { */
    /*     "languageServerHaskell": { */
    /*       "hlintOn": true, */
    /*       "maxNumberOfProblems": 10, */
    /*       "completionSnippetsOn": true, */
    /*       "formattingProvider": "ormolu" */
    /*     } */
    /*   } */
    /* } */
  }
}
